1.
MATCH (startPoint:town { name:"Darjeeling" }),(endPoint:peak { name:"Sandakphu" })
WITH startPoint, endPoint
MATCH path = allShortestPaths((startPoint)-[*..5]-(endPoint))
RETURN path

2.
MATCH (startPoint:town { name:"Darjeeling" }),(endPoint:peak { name:"Sandakphu" })
WITH startPoint, endPoint
MATCH path = allShortestPaths((startPoint)-[*..5]-(endPoint))
WHERE ALL(rel IN relationships(path) WHERE rel.winter = "true")
RETURN path

3.
MATCH path = ((startPoint:town { name:"Darjeeling" })-[r*..5]->(endPoint:peak { name:"Sandakphu" }))
WITH path, REDUCE(pathSum = 0, relation IN RELATIONSHIPS(path) | pathSum + relation.distance) AS path_total_distance
RETURN path, path_total_distance
ORDER BY path_total_distance

4.
MATCH (flight:Flight)-[rel:ORIGIN]->(airport:Airport)
WITH airport, count(flight) as originFlightsCount
RETURN airport, originFlightsCount
ORDER BY originFlightsCount DESC

5.
MATCH (ticket:Ticket)-[rel:ASSIGN]->(flight:Flight)
WITH MIN(ticket.price) as min_price, flight
SET flight.min_price = min_price

MATCH (ticket:Ticket {class: "business"})-[rel:ASSIGN]->(flight:Flight)
WITH ticket.price as business_price, flight
SET flight.business_price = business_price

MATCH (airportOrigin:Airport)<-[rOrigin:ORIGIN]-(flight:Flight)-[rDest:DESTINATION]->(airportDest:Airport)
CREATE (airportOrigin)-[r:HAS_CONNECTION {min_price: flight.min_price, business_price: flight.business_price} ]->(airportDest)


MATCH path = (la_airport:Airport {name: "LAX"})-[rel:HAS_CONNECTION*..3]->(airport:Airport)
WITH RELATIONSHIPS(path) AS pathRelations, path, airport
UNWIND pathRelations AS rels
WITH path, airport, SUM(rels.min_price) as total_flights_min_cost
WHERE total_flights_min_cost < 3000
RETURN airport, path, total_flights_min_cost
ORDER BY total_flights_min_cost


6.
MATCH path = (la_airport:Airport {name: "LAX"})-[rel:HAS_CONNECTION*..5]->(airport:Airport {name: "DAY"})
WITH RELATIONSHIPS(path) AS pathRelations, path
UNWIND pathRelations AS rels
WITH path, SUM(rels.min_price) as total_flights_min_cost
RETURN path, total_flights_min_cost
ORDER BY total_flights_min_cost ASC


7.
MATCH path = (la_airport:Airport {name: "LAX"})-[rel:HAS_CONNECTION*..5]->(airport:Airport {name: "DAY"})
WITH RELATIONSHIPS(path) AS pathRelations, path
UNWIND pathRelations AS rels
WITH path, SUM(rels.min_price) as total_flights_min_cost
RETURN path, total_flights_min_cost
ORDER BY total_flights_min_cost ASC
LIMIT 1


8.
MATCH path = (la_airport:Airport {name: "LAX"})-[rel:HAS_CONNECTION*..5]->(airport:Airport {name: "DAY"})
WITH RELATIONSHIPS(path) AS pathRelations, path
UNWIND pathRelations AS rels
WITH path, SUM(rels.business_price) as total_flights_business_cost
RETURN path, total_flights_business_cost
ORDER BY total_flights_business_cost ASC
LIMIT 1


9.
MATCH (originAirport:Airport)<-[rOrigin:ORIGIN]-(flight:Flight)-[rDest:DESTINATION]->(destAirport:Airport)
WITH DISTINCT flight.airline AS airline_name, SIZE(COLLECT(DISTINCT [originAirport.name, destAirport.name])) as number_of_unique_connections
RETURN airline_name, number_of_unique_connections


10.
MATCH path = ((airport_1:Airport)-[r_1:HAS_CONNECTION]->(airport_2:Airport)-[r_2:HAS_CONNECTION]->(airport_3:Airport))
WHERE airport_1.name <> airport_3.name
WITH DISTINCT [airport_1.name, airport_2.name, airport_3.name] as distinct_path_part_1, path, (r_1.min_price + r_2.min_price) as total_min_price
RETURN path, total_min_price, distinct_path_part_1
ORDER BY total_min_price
LIMIT 1

